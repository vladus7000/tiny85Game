#define F_CPU 10000000
#include <avr/io.h>
#include <avr/delay.h>
#include "Lcd.h"
#include "TinyWireM.h"

const unsigned char StartScreen [] = { // 48 x 32(4 pages)
0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0xC4, 0x00, 0x08, 0xFE, 0x08, 0x08, 0x00, 0x00,
0x90, 0x48, 0x48, 0x48, 0xF0, 0x00, 0x00, 0xF8, 0x10, 0x08, 0x08, 0x08, 0xFE, 0x08, 0x08, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x01, 0x02, 0x02, 0x00, 0x00,
0x01, 0x02, 0x02, 0x01, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xF0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x08, 0x00, 0xF0, 0x20, 0x10, 0x10, 0x00, 0xE0, 0x90,
0x90, 0x90, 0x90, 0xE0, 0x00, 0x00, 0xE0, 0x10, 0x10, 0x10, 0x20, 0xFE, 0x00, 0x00, 0xF4, 0x00,
0x00, 0x10, 0xFC, 0x10, 0x10, 0x00, 0x00, 0x60, 0x90, 0x90, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04,
0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x02, 0x07, 0x00, 0x00, 0x07, 0x00,
0x00, 0x00, 0x03, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char arrow [] = { // 48 x 16(2 pages)
	0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
	0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC,
	0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00,
	0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
	0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
	0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00
};

const unsigned char basket_left [] = { //24x24(3p)
	0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF, 0x7F, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xB8, 0xF8, 0xF0,
	0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xFB, 0xFF, 0xFF, 0xFC, 0xFD,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x36, 0x31, 0x31, 0x30, 0x30, 0x33, 0x3F, 0x7F,
	0x7D, 0x7F, 0xFB, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0,
};

const unsigned char basket_right [] = { //24x24(3p)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xB8, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF,
	0xFF, 0x7F, 0xFF, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xFC, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFF, 0xFF, 0xFB, 0xF0, 0xE0, 0xC0,
	0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xFB, 0x7F, 0x7D, 0x7F, 0x3F, 0x33, 0x30, 0x30, 0x31, 0x31, 0x36,
	0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x01,
};

const unsigned char egg [] = { // 31x18(3p)
	0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7C, 0x7E, 0x3E, 0x3E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x3E, 0x3E, 0x7E, 0x7C, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00,
	0x07, 0x1F, 0x3F, 0x7F, 0xFF, 0xFC, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
	0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x00, 0x74, 0x60,
	0x6C, 0x74, 0x2C, 0x64, 0x78,
};

const unsigned char wolf [] = { // 28x48(6p)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x18, 0xDC, 0xFE, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0xDE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x0F, 0x1F,
	0x1F, 0x1F, 0x1F, 0xEF, 0xF7, 0xFF, 0xFF, 0xDF, 0xE7, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x03, 0x03,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xE3, 0xF1, 0xF8, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xE0, 0xF8, 0xBC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x77, 0x77, 0x7F, 0x7F, 0x7F,
	0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF1, 0xF1, 0xFB,
	0xF7, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xF0, 0x00, 0x80, 0xC0, 0xFC, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0x7C, 0x3E, 0x1C,
};

void drawEgg(uint8_t page, uint8_t seg)
{
	drawImage(page, seg, 31, 18, egg);
}

void clearEgg(uint8_t page, uint8_t seg)
{
	clearRegion(page, seg, page+2, seg+30);
}

void drawStartScreen()
{
	drawImage(2, 50, 48, 32, StartScreen);
}

void drawArrow(uint8_t page, uint8_t seg)
{
	drawImage(page, seg, 48, 16, arrow);
}

void clearArrow(uint8_t page, uint8_t seg)
{
	clearRegion(page, seg, page+1, seg+47);
}

struct Button
{
	enum State
	{
		Up,
		FirstPressed,
		Hold,
		FirstUp,
	};

	Button()
	{}

	Button(uint8_t i, uint8_t j)
	: pinNumber(i)
	{
		DDRB &= ~(1 << j);
	}

	void update()
	{
		bool pressed = PINB & (1 << pinNumber);

		switch (state)
		{
			case Up:
				if (pressed) state = FirstPressed;
			break;
			case FirstPressed:
				if (pressed) state = Hold; else state = FirstUp;
			break;
			case Hold:
				if (pressed) state = Hold; else state = FirstUp;
			break;
			case FirstUp:
				if (pressed) state = FirstPressed; else state = Up;
			break;
			default:
			break;
		}
	}

	State state = Up;
	uint8_t pinNumber;
};

struct ButtonState
{
	Button redButton;
};

class State
{
public:
	~State() {};

	virtual void update(const ButtonState& state) {};
	virtual void transition(State* parent) {}
};

State *g_main, *g_game, *g_current;
void ChangeStateTo(State* to, State* from)
{
	to->transition(from);
	g_current = to;
}

class MainScreen : public State
{
public:
	MainScreen()
	{
		g_main = this;
	}

	virtual void update(const ButtonState& state) override
	{
		if (state.redButton.state == Button::FirstPressed)
		{
			clearArrow(arrowPageStart[arrowIndex&1], 0);
			arrowIndex++;
		}
		drawArrow(arrowPageStart[arrowIndex&1], 0);
		drawStartScreen();
	}
private:
	unsigned char arrowIndex = 0;
	const uint8_t arrowPageStart[2] = {2, 4};
};

class Game : public State
{
	Game()
	{
		g_game = this;
	}

	virtual void update(const ButtonState& state) override
	{

	}
private:

};

static MainScreen ms;

int main(void)
{
	TinyWireM.begin();
	lcdInit();
	clearScreen();

	ButtonState buttonState;
	buttonState.redButton = Button(PINB4, DDB4);
	
	g_current = &ms;

    while (1) 
    {
		buttonState.redButton.update();

		_delay_ms(2);

		g_current->update(buttonState);

    }
}

